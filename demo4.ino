#include <Adafruit_CircuitPlayground.h>
#include <AsyncDelay.h>

#define BUTTON_PIN 4
#define MIDDLE_POSITION1 4
#define MIDDLE_POSITION2 5

const uint8_t spSCORE[]     PROGMEM = {0x06,0xF8,0x46,0xCB,0x00,0x4F,0x79,0x28,0xE0,0x3B,0x75,0x03,0xFC,0xE0,0xE1,0x80,0xEB,0xAC,0x11,0x28,0x94,0xBB,0x8B,0xC8,0x06,0x05,0xA4,0x51,0xC4,0x80,0x78,0x87,0x8B,0x17,0xF3,0x90,0x9A,0x37,0x3A,0x6E,0xC1,0xD3,0x96,0x94,0xFB,0x78,0x05,0xF5,0x78,0xB1,0xDF,0x13,0x64,0xB2,0x6D,0x41,0x79,0x4E,0x94,0xE9,0xB6,0x39,0xE5,0x59,0x99,0xF7,0x97,0x66,0xB2,0x69,0x14,0x3E,0x4E,0xB8,0xC8,0xAA,0x52,0xFB,0x5C,0x95,0x68,0xAF,0x4B,0x6B,0x7A,0x47,0x50,0x5E,0x2E,0x9D,0xA9,0x55,0x41,0xB1,0xB8,0x74,0x3E,0x66,0x27,0xE9,0x9A,0xD6,0x7B,0xDF,0x55,0xC2,0x5D,0x5B,0x1F,0x5C,0x75,0x33,0x6F,0x6D,0x7D,0xF4,0x55,0xC9,0xB2,0xA5,0x75,0xC9,0x59,0x85,0xFA,0xE6,0x3A,0xFC,0x11,0x39,0x79,0x61,0x51,0x65};
const uint8_t spSTART[]     PROGMEM = {0x08,0xD8,0x50,0x05,0x01,0x5F,0xB1,0x12,0xE0,0x33,0x55,0x06,0x7C,0xEE,0x66,0x80,0x6F,0x54,0x19,0xF0,0x65,0x18,0x07,0x10,0x28,0x94,0xBB,0x8B,0xC8,0x06,0x03,0x6C,0x96,0x36,0x9C,0xAA,0xD3,0x5D,0xBC,0xD3,0xF1,0x8A,0x52,0x6F,0xE9,0x28,0x27,0x28,0xF1,0x32,0x24,0x3C,0x9D,0x28,0xC7,0x4B,0x97,0xF0,0x74,0xD2,0x9C,0xAE,0x4D,0x23,0xE3,0x2D,0x56,0x95,0xF3,0xB6,0x85,0x76,0x5A,0x5D,0x2E,0xDB,0x1A,0xB6,0x6A,0x8C,0xB9,0x4C,0xAA,0xEB,0xC2,0x36,0x95,0x18,0x15,0x2A,0x0B,0xCB,0x54,0x83,0x8E,0x9B,0xB4,0x24,0x93,0x50,0xEE,0x2E,0x22,0x1B,0x00,0x18,0x70,0x94,0x3A,0x03,0x5E,0x66,0x53,0xC0,0x51,0x96,0x04,0xD8,0x42,0x02,0x01,0x8D,0xBA,0xFD,0x05,0x79,0x15,0x65};
const uint8_t spBAD[]       PROGMEM = {0x08,0x00,0x71,0xC2,0x98,0xD1,0xA7,0xA9,0x5A,0xAA,0x13,0x14,0x15,0x1C,0x69,0xAD,0x4F,0x30,0xEC,0x88,0xAB,0x2F,0x3A,0xC1,0xB0,0x23,0x6E,0x51,0xEB,0x04,0xC3,0x9E,0x84,0x44,0xA3,0x13,0xF5,0xD0,0x16,0x16,0xB1,0x4E,0xDC,0x63,0x7B,0xA8,0xC7,0x3A,0x59,0x8F,0xED,0xA9,0x51,0xEB,0x54,0xAD,0x66,0x84,0x45,0xE5,0x55,0xB7,0x9C,0x91,0xE6,0xB5,0x57,0xDB,0x62,0x78,0x99,0xD7,0x6E,0x7D,0xCD,0xE6,0xEE,0x59,0xA5,0xF5,0x25,0xBA,0x85,0x57,0x99,0xD2,0x97,0xA0,0x11,0xD6,0x75,0xC2,0x98,0xBC,0x66,0xD6,0x46,0xD6,0x23,0x19,0x85,0x72,0x77,0x11,0xD9,0xE0,0xFA,0x6D,0xDC,0xC5,0xD4,0x4D,0xEA,0x9B,0x17,0x77,0x73,0xDB,0xFF,0x39,0x51,0x51,0x75,0x15,0x51,0x21};
const uint8_t spRESET[]     PROGMEM = {0xAA,0xF0,0x4D,0x54,0x22,0x5B,0xFB,0xAC,0xC5,0x49,0x53,0x66,0x5A,0xCB,0x15,0x76,0xCB,0xA8,0x1B,0xAD,0x56,0x70,0x8C,0x21,0xCF,0x34,0xDA,0xC1,0x76,0x9B,0xBB,0xAC,0x83,0xCC,0x34,0x72,0x7E,0x93,0x42,0x39,0x3D,0x4B,0x01,0x17,0xBB,0x69,0x40,0x00,0x8F,0x85,0x09,0xE0,0xCA,0x0C,0x01,0x5C,0x16,0x29,0x80,0x2B,0x23,0x0C,0xB0,0x69,0x7A,0x2B,0xAA,0x16,0x1B,0xA9,0xD8,0xAB,0x6F,0x56,0x75,0xDC,0x67,0xAF,0xA1,0x7B,0x93,0x4A,0x5B,0x3C,0xC6,0x91,0x42,0xD3,0x74,0x71,0x9A,0xAA,0x93,0x68,0xEB,0x29,0x6C,0x11,0xCA,0xDD,0x45,0x64,0x03,0x28,0x60,0x28,0x77,0x01,0x3C,0x23,0x29,0x80,0x6B,0xD4,0x09,0xB0,0x98,0x27,0x02,0x0A,0x2D,0xFB,0x39,0x25,0x55,0x15,0x51,0x25};


volatile bool gameFailed = false;
volatile bool buttonPressed = false;
volatile unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
const unsigned long debounceDelay = 200;      // the debounce time; increase if the output flickers

int lightPosition = 0;
int speed = 200;  // Initial speed (milliseconds between each position change)
bool movingForward = true;

AsyncDelay lightDelay;

void setup() {
  CircuitPlayground.begin();
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), handleButtonPress, RISING);
  CircuitPlayground.clearPixels();
  Serial.begin(9600);
  Serial.println("Game starting...");
      	CircuitPlayground.speaker.say(spSTART);


  lightDelay.start(speed, AsyncDelay::MILLIS);
}

void loop() {
  // Read the slide switch state
  bool slideSwitch = CircuitPlayground.slideSwitch();

  if (gameFailed) {
    if (!slideSwitch) { // Reset game when switch is flipped to the right
      resetGame();
      CircuitPlayground.speaker.say(spRESET);

    } else {
      allOn(0xFF0000); // Hold the red light
    }
  } else {
    // Update light position
    if (lightDelay.isExpired()) {
      lightDelay.restart();
      updateLightPosition();
    }

    // Check for button press
    if (buttonPressed) {
      buttonPressed = false; // Reset the flag
      Serial.println("Button pressed!");
      handleButtonPressLogic();
    }
  }
}

void updateLightPosition() {
  if (!gameFailed) {
    CircuitPlayground.clearPixels();
    CircuitPlayground.setPixelColor(lightPosition, 0, 0, 255); // Blue light

    if (movingForward) {
      lightPosition++;
      if (lightPosition >= 9) {
        movingForward = false;
      }
    } else {
      lightPosition--;
      if (lightPosition <= 0) {
        movingForward = true;
      }
    }

    Serial.print("Light position: ");
    Serial.println(lightPosition);
  }
}

void handleButtonPressLogic() {
  if (lightPosition == MIDDLE_POSITION1 || lightPosition == MIDDLE_POSITION2) {
    // Success: Flash white and increase speed
    Serial.println("Success! Light is in the middle.");
    playSuccessSequence();
    speed = max(speed - 20, 10); // Increase speed, minimum speed 10ms
    lightDelay.start(speed, AsyncDelay::MILLIS);
  } else {
    // Failure: Hold red light and wait for switch flip
    Serial.println("Fail! Light is not in the middle.");
    playFailSequence();
    gameFailed = true; // Set game to failed
  }
}

void playSuccessSequence() {
  for (int i = 0; i < 3; i++) {
    allOn(0xFFFFFF);
    delay(100);
    CircuitPlayground.clearPixels();
    delay(100);
  }
  CircuitPlayground.playTone(1000, 200); // Play success sound
    	CircuitPlayground.speaker.say(spSCORE);

}

void playFailSequence() {
  allOn(0xFF0000); // Hold red light
  CircuitPlayground.playTone(500, 200); // Play fail sound
    	CircuitPlayground.speaker.say(spBAD);

}

void handleButtonPress() {
  unsigned long currentTime = millis();
  if ((currentTime - lastDebounceTime) > debounceDelay) {
    lastDebounceTime = currentTime;
    buttonPressed = true;
    Serial.println("button press");
  }
}

void resetGame() {
  gameFailed = false;
  lightPosition = 0;
  speed = 200;  // Reset speed to initial value
  movingForward = true;
  lightDelay.start(speed, AsyncDelay::MILLIS);
  Serial.println("Switch flipped: Game reset");
}

void allOn(int color) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, color);
  }
}
